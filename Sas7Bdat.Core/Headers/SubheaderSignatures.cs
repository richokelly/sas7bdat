namespace Sas7Bdat.Core.Headers;

internal static class SubheaderSignatures
{
    public static class Format32
    {
        public const int LcsOffset = 354;
        public const int LcpOffset = 378;
        public const int CompressionOffset = 16;
    }

    public static class Format64
    {
        public const int LcsOffset = 682;
        public const int LcpOffset = 706;
        public const int CompressionOffset = 20;
    }

    public static SubheaderType IdentifySubheader(ReadOnlySpan<byte> signature, Format format)
    {
        if (format == Format.Bit64)
        {
            switch (signature)
            {
                case [0x00, 0x00, 0x00, 0x00, 0xF7, 0xF7, 0xF7, 0xF7]:
                case [0xF7, 0xF7, 0xF7, 0xF7, 0x00, 0x00, 0x00, 0x00]:
                case [0xF7, 0xF7, 0xF7, 0xF7, 0xFF, 0xFF, 0xFB, 0xFE]:
                case [0xFF, 0xFF, 0xFB, 0xFE, 0xF7, 0xF7, 0xF7, 0xF7]:
                    return SubheaderType.RowSize;
                case [0x00, 0x00, 0x00, 0x00, 0xF6, 0xF6, 0xF6, 0xF6]:
                case [0xF6, 0xF6, 0xF6, 0xF6, 0x00, 0x00, 0x00, 0x00]:
                case [0xF6, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFB, 0xFE]:
                case [0xFF, 0xFF, 0xFB, 0xFE, 0xF6, 0xF6, 0xF6, 0xF6]:
                    return SubheaderType.ColumnSize;
                case [0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00]:
                    return SubheaderType.SubheaderCounts;
                case [0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD]:
                    return SubheaderType.ColumnText;
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                    return SubheaderType.ColumnName;
                case [0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC]:
                    return SubheaderType.ColumnAttributes;
                case [0xFE, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFE]:
                    return SubheaderType.FormatAndLabel;
                case [0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE]:
                    return SubheaderType.ColumnList;
            }
        }
        else
        {
            switch (signature)
            {
                case [0xF7, 0xF7, 0xF7, 0xF7]:
                    return SubheaderType.RowSize;
                case [0xF6, 0xF6, 0xF6, 0xF6]:
                    return SubheaderType.ColumnSize;
                case [0x00, 0xFC, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFC, 0x00]:
                    return SubheaderType.SubheaderCounts;
                case [0xFD, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFD]:
                    return SubheaderType.ColumnText;
                case [0xFF, 0xFF, 0xFF, 0xFF]:
                    return SubheaderType.ColumnName;
                case [0xFC, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFC]:
                    return SubheaderType.ColumnAttributes;
                case [0xFE, 0xFB, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFB, 0xFE]:
                    return SubheaderType.FormatAndLabel;
                case [0xFE, 0xFF, 0xFF, 0xFF]:
                case [0xFF, 0xFF, 0xFF, 0xFE]:
                    return SubheaderType.ColumnList;
            }
        }

        return SubheaderType.Unknown;
    }
}